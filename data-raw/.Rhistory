# Criando um subset para reduzir a base de codigos do ibge
ibgecode_2 <- subset.data.frame(ibgecode, select = c(code_muni, name_muni, abrev_state))
# Fazendo o MERGE
# Merge entre base de dados do questionario e dos cÃ³digos do IBGE
gastos_citycodes <- merge(gastoscovid, ibgecode_2,
by.x = c("cidade", "uf"),
by.y = c("name_muni" , "abrev_state"),
all.x = TRUE, all.y = FALSE)
# MERGE com dados do brasil.io
baseampla2 <- merge(gastos_citycodes, brasil.io,
by.x = c("code_muni", "data"),
by.y = c("city_ibge_code", "date"),
all.x = TRUE, all.y = FALSE)
# Verificando a classe das variaveis
```{r, message=FALSE, warning=FALSE}
# reduzindo dataframe para somente variaveis de interesse
baseampla <- baseampla2[, -c(5, 6, 28:30, 33, 34)]
```
# Salvar dataframe como arquivo dta (para usar no stata)
# Desejo salvar essa base maior com todos os demais datasets. Ela serve de ponto de inicio da analise.
# Aqui os dados ainda apresentam missing values
require(foreign)
require(MASS)
write.dta(baseampla, "covid_averting.dta")
# PREPARANDO VARIAVEIS
# convertendo para numeral
baseampla$rendafam <- as.numeric(baseampla$rendafam)
baseampla$qtd_filho_dep <- as.numeric(baseampla$qtd_filho_dep)
baseampla$gasto_equip_defensiv <- as.numeric(baseampla$gasto_equip_defensiv)
baseampla$confirmed <- as.numeric(baseampla$confirmed)
baseampla$deaths <- as.numeric(baseampla$deaths)
baseampla$estimated_population_2019 <- as.numeric(baseampla$estimated_population_2019)
# Criando dummies
#Dummi para genero (1=homem, 0=mulher)
baseampla$sexo = ifelse(baseampla$sexo == "Masculino", 1, 0)
# Dummy para etnia(1=Brancos, 0=nao brancos)
#baseampla$raca = ifelse(baseampla$raca == "Branco", 1, 0)
baseampla$d.raca[baseampla$raca == "Branco"] <- 0
baseampla$d.raca[baseampla$raca == "Preto" ] <- 1
baseampla$d.raca[baseampla$raca == "Pardo" ] <- 1
baseampla$d.raca[baseampla$raca == "Amarelo" ] <- 1
baseampla$d.raca[baseampla$raca == "IndÃ?gena" ] <- 1
baseampla$d.raca <- as.numeric(baseampla$d.raca)
# categorias de niveis para escolaridade (ensino sup, PG e medio = 1, 0 do contrÃ¡rio)
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Superior"] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "PÃ³s-GraduaÃ§Ã£o" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "MÃ©dio" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Fundamental" ] <- 0
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino BÃ¡sico" ] <- 0
# Dummy para estado civil (1=casado, 0=nao casado)
baseampla$estcivil = ifelse(baseampla$estcivil == "Casado", 1, 0)
# Dummy filhos ou dependentes morando em casa (1=sim, 0 do contrÃ¡rio)
baseampla$filho_dep = ifelse(baseampla$filho_dep ==
"Sim, filhos ou dependentes moram comigo.", 1, 0)
# Dummy plano de saude (1= sim, 0= nao)
baseampla$plano = ifelse(baseampla$plano == "Sim", 1, 0)
# Dummy contratou plano de saude por causa do covid  (1= sim, 0= nao)
baseampla$plano_covid = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy contratou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$data_plano = ifelse(baseampla$data_plano == "VocÃª contratou o plano de saÃºde DURANTE A PANDEMIA.", 1, 0)
# Dummy pagou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$pgt_plano = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy fez teste covid (1=testou covid, 0=Nao testou)
baseampla$teste_cov = ifelse(baseampla$teste_cov == "Sim", 1, 0)
# Dummy resultado teste covid (1=negativo , 0=outro)
baseampla$result_teste_1 = ifelse(baseampla$result_teste_cov == "Negativo", 1, 0)
# Dummy contato pessoa contaminada (1=sim, 0=Nao)
baseampla$contat_cov = ifelse(baseampla$contat_cov == "Sim", 1, 0)
# Dummy conhecia alguem que morreu por covid (sim=1, 0=Nao)
baseampla$morte_cov = ifelse(baseampla$morte_cov == "Sim", 1, 0)
# Dummy comprou defensivos contra covid (sim=1, 0=Nao)
baseampla$equip_defensiv = ifelse(baseampla$equip_defensiv == "Sim", 1, 0)
# Dummy para idoso (1=idoso, 0 nao idoso)
baseampla$idoso = ifelse(baseampla$idade >= 60, 1, 0)
# Renomeando valor do gasto defensivo total
baseampla$gasto_equip_defensivo <- baseampla$gasto_equip_defensiv
# Salvando base variaveis criadas para o formato para STATA.
write.dta(baseampla, "covid_averting.dta")
setwd("C:/Users/User/Dropbox/Averting Expenditures Paper/rmd")
ibrary(scales)
library(tidyverse)
library(magrittr)
library(utf8)
library(geobr)
# Carregando dados do arquivo csv (diretamente do pc) referente as estatisiticas de covid-19
brasil.io <- read.csv('caso.csv', fileEncoding = "UTF-8")
# Ajustando dados para o formato caracteres
brasil.io$state %<>% as.character()
brasil.io$city %<>% as.character()
brasil.io$date %<>% as.Date()
# Puxando base de Dados dos questionarios de arquivo excel diretamente do pc
library(readxl)
gastoscovid <- read_excel("gastoscovid_v1206.xlsx", sheet = "respostas")
# convertendo a coluna data para formato Date e grafia desejada.
gastoscovid$data %<>% as.Date()
# Criando dataframe com dados ibge
library(geobr)
ibgecode <- lookup_muni(code_muni = 'all') # optei por puxar TODOS os municipios pois poderei usa-los em outros trabalhos
# Reduzir ibgecode
# Criando um subset para reduzir a base de codigos do ibge
ibgecode_2 <- subset.data.frame(ibgecode, select = c(code_muni, name_muni, abrev_state))
# Fazendo o MERGE
# Merge entre base de dados do questionario e dos cÃ³digos do IBGE
gastos_citycodes <- merge(gastoscovid, ibgecode_2,
by.x = c("cidade", "uf"),
by.y = c("name_muni" , "abrev_state"),
all.x = TRUE, all.y = FALSE)
# MERGE com dados do brasil.io
baseampla2 <- merge(gastos_citycodes, brasil.io,
by.x = c("code_muni", "data"),
by.y = c("city_ibge_code", "date"),
all.x = TRUE, all.y = FALSE)
baseampla <- baseampla2[, -c(5, 6, 28:30, 33, 34)]
# Salvar dataframe como arquivo dta (para usar no stata)
# Desejo salvar essa base maior com todos os demais datasets. Ela serve de ponto de inicio da analise.
# Aqui os dados ainda apresentam missing values
require(foreign)
require(MASS)
baseampla$rendafam <- as.numeric(baseampla$rendafam)
baseampla$qtd_filho_dep <- as.numeric(baseampla$qtd_filho_dep)
baseampla$gasto_equip_defensiv <- as.numeric(baseampla$gasto_equip_defensiv)
baseampla$confirmed <- as.numeric(baseampla$confirmed)
baseampla$deaths <- as.numeric(baseampla$deaths)
baseampla$estimated_population_2019 <- as.numeric(baseampla$estimated_population_2019)
# Criando dummies
#Dummi para genero (1=homem, 0=mulher)
baseampla$sexo = ifelse(baseampla$sexo == "Masculino", 1, 0)
# Dummy para etnia(1=Brancos, 0=nao brancos)
#baseampla$raca = ifelse(baseampla$raca == "Branco", 1, 0)
baseampla$d.raca[baseampla$raca == "Branco"] <- 0
baseampla$d.raca[baseampla$raca == "Preto" ] <- 1
baseampla$d.raca[baseampla$raca == "Pardo" ] <- 1
baseampla$d.raca[baseampla$raca == "Amarelo" ] <- 1
baseampla$d.raca[baseampla$raca == "IndÃ?gena" ] <- 1
baseampla$d.raca <- as.numeric(baseampla$d.raca)
# categorias de niveis para escolaridade (ensino sup, PG e medio = 1, 0 do contrÃ¡rio)
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Superior"] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "PÃ³s-GraduaÃ§Ã£o" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "MÃ©dio" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Fundamental" ] <- 0
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino BÃ¡sico" ] <- 0
# Dummy para estado civil (1=casado, 0=nao casado)
baseampla$estcivil = ifelse(baseampla$estcivil == "Casado", 1, 0)
# Dummy filhos ou dependentes morando em casa (1=sim, 0 do contrÃ¡rio)
baseampla$filho_dep = ifelse(baseampla$filho_dep ==
"Sim, filhos ou dependentes moram comigo.", 1, 0)
# Dummy plano de saude (1= sim, 0= nao)
baseampla$plano = ifelse(baseampla$plano == "Sim", 1, 0)
# Dummy contratou plano de saude por causa do covid  (1= sim, 0= nao)
baseampla$plano_covid = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy contratou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$data_plano = ifelse(baseampla$data_plano == "VocÃª contratou o plano de saÃºde DURANTE A PANDEMIA.", 1, 0)
# Dummy pagou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$pgt_plano = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy fez teste covid (1=testou covid, 0=Nao testou)
baseampla$teste_cov = ifelse(baseampla$teste_cov == "Sim", 1, 0)
# Dummy resultado teste covid (1=negativo , 0=outro)
baseampla$result_teste_1 = ifelse(baseampla$result_teste_cov == "Negativo", 1, 0)
# Dummy contato pessoa contaminada (1=sim, 0=Nao)
baseampla$contat_cov = ifelse(baseampla$contat_cov == "Sim", 1, 0)
# Dummy conhecia alguem que morreu por covid (sim=1, 0=Nao)
baseampla$morte_cov = ifelse(baseampla$morte_cov == "Sim", 1, 0)
# Dummy comprou defensivos contra covid (sim=1, 0=Nao)
baseampla$equip_defensiv = ifelse(baseampla$equip_defensiv == "Sim", 1, 0)
# Dummy para idoso (1=idoso, 0 nao idoso)
baseampla$idoso = ifelse(baseampla$idade >= 60, 1, 0)
# Renomeando valor do gasto defensivo total
baseampla$gasto_equip_defensivo <- baseampla$gasto_equip_defensiv
# Salvando base variaveis criadas para o formato para STATA.
write.dta(baseampla, "covid_averting.dta")
baseampla_red <- subset(baseampla, select = c("gasto_equip_defensivo", "equip_defensiv", "idoso", "morte_cov", "idade", "contat_cov", "result_teste_1", "teste_cov", "pgt_plano","data_plano", "plano", "filho_dep", "estcivil", "d.escolaridade", "d.raca","raca", "sexo", "renda", "rendafam", "qtd_filho_dep","confirmed", "deaths", "confirmed_per_100k_inhabitants"))
write.dta(baseampla_red, "covid_full.dta")
library(mice)
library(VIM)
library(lattice)
library(ggplot2)
## missing data patterns
md.pattern(baseampla_red)
# Predictive Mean Matching (PMM) e uma abordagem semi-paramÃ©trica de imputaÃ§Ã£o. E semelhante ao mÃ©todo de regressÃ£o, exceto que, para cada valor ausente, preenche um valor aleatoriamente dentre os valores de doadores observados de uma observaÃ§Ã£o cujos valores preditos por regressÃ£o estÃ£o mais prÃ³ximos do valor predito por regressÃ£o para o valor ausente da regressÃ£o simulada modelo (Heitjan e Little 1991; Schenker e Taylor 1996).
# O mÃ©todo PMM garante que os valores imputados sejam plausÃ?veis; pode ser mais apropriado que o mÃ©todo de regressÃ£o (que assume uma distribuiÃ§Ã£o normal multivariada conjunta) se a premissa de normalidade for violada (Horton e Lipsitz 2001, p. 246).
## Number of observations per patterns for all pairs of variables
p <- md.pairs(baseampla_red)
# Missing Data Visualization
## Margin plot of d.escolaridade  and morte_cov
marginplot(baseampla_red[c(4, 13)], col = c("blue", "red", "orange"))
## distributions of missing variable by confirmed variable -
pbox(baseampla_red, pos = 19)
# Using MICE (Mulitple Imputation by Chained Equations)
## Como temos um numero grande missing values, optei por fazer a imputacao de dados seguindo o metodo PMM
## by default it does 5 imputations for all missing values
imp1 <- mice(baseampla_red, m = 5)
# he output states that, as we requested,
# 5 imputed datasets were created. Our two variables with missing values were imputed using "pmm"
# Imputation Diagnostic Checks
# The first three observation were missing information for equip_defensiv.
# imp1$imp$contat_cov
# Combining imp_dataset with observed data set
imp_tot2 <- complete(imp1, "long", inc = TRUE)
# APÃ³s imputacao o dataframe passa a ter 22 columas e 6 conjunto de dados definidos na coluna 1 .imp
# We can inspect the distributions of the original and imputed data using the stripplot function that is part of the lattice package.
## labels observed data in blue and imputed data in red for y1
col <- rep(c("blue", "red")[1 + as.numeric(is.na(imp1$data$contat_cov))], 6)
## plots data for y1 by imputation
stripplot(contat_cov ~ .imp, data = imp_tot2, jit = TRUE, col = col, xlab = "imputation Number")
# Regression with imputed datasets
## linear regression for each imputed data set - 5 regression are run
fitm <- with(data = imp1, lm(equip_defensiv ~ morte_cov + contat_cov))
summary(fitm)
# R will estimate our regression model separately for each imputed dataset, 1 though 5. We then need to summarize or pool those estimates to get one overall set of parameter estimates.
## pool coefficients and standard errors across all 5 regression models
pool(fitm)
## output parameter estimates
summary(pool(fitm))
# Dataframe after imputation
base_imp <- subset(imp_tot2, select = c("gasto_equip_defensivo", "equip_defensiv", "idoso", "morte_cov", "idade","contat_cov", "result_teste_1", "teste_cov", "pgt_plano","data_plano", "plano", "filho_dep", "estcivil", "d.escolaridade","d.raca","raca", "sexo", "renda", "rendafam",   "qtd_filho_dep","confirmed", "deaths", "confirmed_per_100k_inhabitants"))
write.dta(base_imp, "covid_imp.dta")
write.dta(base_imp, "covid_basedados_imputado.dta")
library(haven)
covid_basedados_imputado <- read_dta("covid_basedados_imputado.dta")
View(covid_basedados_imputado)
stargazer(reg_gd, reg_ed_prob, reg_ed_logit, reg_ed_logit_sr, type = 'text')
reg_gd <- lm(gasto_equip_defensivo ~  + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d.raca + renda + d.escolaridade, data = base_cov)
View(baseampla2)
library(haven)
covid_basedados_imputado <- read_dta("covid_basedados_imputado.dta")
base_cov <- na.omit(covid_basedados_imputado)
library(foreign)
library(stargazer)
# Estou realizando as Regressoes com banco de dados imputado
# Estou testando diferentes conjunto de variaveis para o modelo.
# y = (equip_defensiv) = Comprou ou nao comprou equipamentos defensivo
teste1 <- glm(equip_defensiv ~ d.escolaridade + sexo + estcivil + morte_cov + contat_cov +  filho_dep + idade + raca + renda, data = base_cov, family = binomial(link = "probit"))
View(base_cov)
View(base_cov)
library(foreign)
library(stargazer)
# Estou realizando as Regressoes com banco de dados imputado
# Estou testando diferentes conjunto de variaveis para o modelo.
# y = (equip_defensiv) = Comprou ou nao comprou equipamentos defensivo
teste1 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov +  filho_dep + idade + raca + renda, data = base_cov, family = binomial(link = "probit"))
teste2 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep + idade +  raca, data = base_cov, family = binomial(link = "probit"))
teste3 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep + idade, data = base_cov, family = binomial(link = "probit"))
teste4 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep + idade, data = base_cov, family = binomial(link = "probit"))
teste5 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep, data = base_cov, family = binomial(link = "probit"))
teste6 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + filho_dep, data = base_cov, family = binomial(link = "probit"))
teste7 <- glm(equip_defensiv ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov, data = base_cov, family = binomial(link = "probit"))
stargazer(teste1, teste2, teste3, teste4, teste5, teste6, teste7, type = 'text')
mqo_gef1 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + raca + renda, data = base_cov)
mqo_gef2 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + idoso + raca, data = base_cov)
mqo_gef3 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep + idade + idoso, data = base_cov)
mqo_gef4 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep + idade, data = base_cov)
mqo_gef5 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov + qtd_filho_dep + filho_dep, data = base_cov)
mqo_gef6 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov, data = base_cov)
mqo_gef7 <- lm(gasto_equip_defensivo ~ d_escolaridade + sexo + estcivil + morte_cov + contat_cov, data = base_cov)
stargazer(mqo_gef5, mqo_gef6, mqo_gef7, no.space=TRUE, type = 'text')
stargazer(mqo_gef1, mqo_gef2, mqo_gef3, no.space=TRUE, type = 'text')
reg_gd <- lm(gasto_equip_defensivo ~  + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d.raca + renda + d_escolaridade, data = base_cov)
library(stargazer)
reg_gd <- lm(gasto_equip_defensivo ~  + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d.raca + renda + d_escolaridade, data = base_cov)
library(stargazer)
reg_gd <- lm(gasto_equip_defensivo ~  + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov)
summary(reg_gd)
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob)
reg_ed_logit <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "logit"))
summary(reg_ed_logit)
reg_ed_logit_sr <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed, data = base_cov, family = binomial(link = "logit"))
summary(reg_ed_logit_sr)
stargazer(reg_gd, reg_ed_prob, reg_ed_logit, reg_ed_logit_sr, type = 'text')
library("margins")
library("datasets")
library("stargazer")
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob)
plot(margins(reg_ed_prob))
summary(margins(reg_ed_prob))
stargazer(reg_ed_prob, type = 'text')
rm(list())
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(scales)
library(tidyverse)
library(magrittr)
library(utf8)
library(haven)
covid_basedados_imputado <- read_dta("C:/Users/User/Dropbox/Averting Expenditures Paper/rmd/dados_dta/covid_basedados_imputado.dta")
# Deixando a base sem NA's
base_cov <- na.omit(covid_basedados_imputado)
reg_gd <- lm(gasto_equip_defensivo ~  + sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov)
summary(reg_gd)
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob)
reg_ed_logit <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "logit"))
summary(reg_ed_logit)
reg_ed_logit_sr <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed, data = base_cov, family = binomial(link = "logit"))
summary(reg_ed_logit_sr)
library("margins")
library("datasets")
library("stargazer")
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
confint(reg_ed_prob)
library(aod)
wald.test(b = coef(reg_ed_prob), Sigma = vcov(reg_ed_prob), Terms = 7:11)
reg_ed_prob0 <- update(reg_ed_prob, formula= equip_defensiv ~ 1)   # Calcula o LL mantendo Y constante.
McFadden<- 1-as.vector(logLik(reg_ed_prob)/logLik(reg_ed_prob0))
McFadden
library(rsq)
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob)
rsq(reg_ed_prob, adj = FALSE, type = 'lr')
rsq(reg_ed_prob,adj=TRUE)
## change in deviance
with(reg_ed_prob, null.deviance - deviance)
## change in degrees of freedom
with(reg_ed_prob, df.null - df.residual)
## chi square test p-value
with(reg_ed_prob, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
logLik(reg_ed_prob)
library("ROCR")
m1 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, control = glm.control(maxit=100, trace=FALSE), data = base_cov, family = binomial(link = "probit"))
summary(m1)
m1preds <- predict(m1, type= "response")
class(m1preds)
str(m1preds)
m1.predict <- prediction(m1preds, base_cov$equip_defensiv)
m1preds <- predict(m1, type= "response")
class(m1preds)
str(m1preds)
m1.predict <- prediction(m1preds, base_cov$equip_defensiv)
m1.predict <- prediction(m1preds, base_cov$equip_defensiv)
class(equip_defensiv)
class(base_cov$equip_defensiv)
class(base_cov$sexo)
class(base_cov$equip_defensiv)
class(base_cov$sexo)
class(base_cov$estcivil)
class(base_cov$morte_cov)
class(base_cov$contat_cov)
class(base_cov$filho_dep)
class(base_cov$idade)
class(base_cov$deaths)
class(base_cov$confirmed)
class(base_cov$d_raca)
class(base_cov$renda)
class(base_cov$d_escolaridade)
m1.predict <- prediction(m1preds, base_cov$equip_defensiv)
m1.predict <- prediction(m1preds[,2], base_cov$equip_defensiv[,2])
m1.predict <- prediction(m1preds[,1], base_cov$equip_defensiv[,1])
m1preds <- predict(m1, type= "response")
class(m1preds)
str(m1preds)
m1.predict <- prediction(m1preds, base_cov$equip_defensiv)
reg_ed_prob <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_raca + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob)
reg_ed_prob_2 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + renda + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob_2)
reg_ed_prob_3 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + idade + deaths + confirmed + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob_3)
reg_ed_prob_4 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + filho_dep + deaths + confirmed + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob_4)
reg_ed_prob_5 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + idade + deaths + confirmed + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob_5)
reg_ed_prob_6 <- glm(equip_defensiv ~ sexo + estcivil + morte_cov + contat_cov + deaths + confirmed + d_escolaridade, data = base_cov, family = binomial(link = "probit"))
summary(reg_ed_prob_6)
stargazer(reg_ed_prob, reg_ed_prob_2, reg_ed_prob_3, reg_ed_prob_4, reg_ed_prob_5, reg_ed_prob_6, type = 'text')
wald.test(b = coef(reg_ed_prob_6), Sigma = vcov(reg_ed_prob_6), Terms = 7:11)
library(aod)
wald.test(b = coef(reg_ed_prob_6), Sigma = vcov(reg_ed_prob_6), Terms = 7:11)
wald.test(b = coef(reg_ed_prob_6), Sigma = vcov(reg_ed_prob_6), Terms = 5:7)
wald.test(b = coef(reg_ed_prob_6), Sigma = vcov(reg_ed_prob_6), Terms = 4:7)
# McFadden's Pseudo R-squared
reg_ed_prob0 <- update(reg_ed_prob_6, formula= equip_defensiv ~ 1)   # Calcula o LL mantendo Y constante.
McFadden<- 1-as.vector(logLik(reg_ed_prob_6)/logLik(reg_ed_prob_6))
McFadden
McFadden<- 1-as.vector(logLik(reg_ed_prob_6)/logLik(reg_ed_prob_60))
McFadden<- 1-as.vector(logLik(reg_ed_prob_6)/logLik(reg_ed_prob_60))
McFadden<- 1-as.vector(logLik(reg_ed_prob_6)/logLik(reg_ed_prob0))
McFadden
library(scales)
library(tidyverse)
library(magrittr)
library(utf8)
library(geobr)
library(readxl)
library(mice)
library(VIM)
library(lattice)
# Carregando dados do arquivo csv (diretamente do pc) referente as estatisiticas de covid-19
brasil.io <- read.csv('caso.csv', fileEncoding = "UTF-8")
# Ajustando dados para o formato caracteres
brasil.io$state %<>% as.character()
brasil.io$city %<>% as.character()
brasil.io$date %<>% as.Date()
# Puxando base de Dados dos questionarios de arquivo excel diretamente do pc
gastoscovid <- read_excel("gastoscovid_v1206.xlsx", sheet = "respostas")
# convertendo a coluna data para formato Date e grafia desejada.
gastoscovid$data %<>% as.Date()
# Criando dataframe com dados ibge
ibgecode <- lookup_muni(code_muni = 'all') # optei por puxar TODOS os municipios pois poderei usa-los em outros trabalhos
# Reduzir ibgecode
# Criando um subset para reduzir a base de codigos do ibge
ibgecode_2 <- subset.data.frame(ibgecode, select = c(code_muni, name_muni, abrev_state))
# Fazendo o MERGE
# Merge entre base de dados do questionario e dos cÃ³digos do IBGE
gastos_citycodes <- merge(gastoscovid, ibgecode_2,
by.x = c("cidade", "uf"),
by.y = c("name_muni" , "abrev_state"),
all.x = TRUE, all.y = FALSE)
# MERGE com dados do brasil.io
baseampla2 <- merge(gastos_citycodes, brasil.io,
by.x = c("code_muni", "data"),
by.y = c("city_ibge_code", "date"),
all.x = TRUE, all.y = FALSE)
# Verificando a classe das variaveis
# reduzindo dataframe para somente variaveis de interesse
baseampla <- baseampla2[, -c(5, 6, 28:30, 33, 34)]
# Salvar dataframe como arquivo dta (para usar no stata)
# Desejo salvar essa base maior com todos os demais datasets. Ela serve de ponto de inicio da analise.
# Aqui os dados ainda apresentam missing values
# PREPARANDO VARIAVEIS
# convertendo para numeral
baseampla$rendafam <- as.numeric(baseampla$rendafam)
baseampla$qtd_filho_dep <- as.numeric(baseampla$qtd_filho_dep)
baseampla$gasto_equip_defensiv <- as.numeric(baseampla$gasto_equip_defensiv)
baseampla$confirmed <- as.numeric(baseampla$confirmed)
baseampla$deaths <- as.numeric(baseampla$deaths)
baseampla$estimated_population_2019 <- as.numeric(baseampla$estimated_population_2019)
# Criando dummies
#Dummi para genero (1=homem, 0=mulher)
baseampla$sexo = ifelse(baseampla$sexo == "Masculino", 1, 0)
# Dummy para etnia(1=Brancos, 0=nao brancos)
#baseampla$raca = ifelse(baseampla$raca == "Branco", 1, 0)
baseampla$d.raca[baseampla$raca == "Branco"] <- 0
baseampla$d.raca[baseampla$raca == "Preto" ] <- 1
baseampla$d.raca[baseampla$raca == "Pardo" ] <- 1
baseampla$d.raca[baseampla$raca == "Amarelo" ] <- 1
baseampla$d.raca[baseampla$raca == "IndÃ?gena" ] <- 1
baseampla$d.raca <- as.numeric(baseampla$d.raca)
# categorias de niveis para escolaridade (ensino sup, PG e medio = 1, 0 do contrÃ¡rio)
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Superior"] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "PÃ³s-GraduaÃ§Ã£o" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "MÃ©dio" ] <- 1
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino Fundamental" ] <- 0
baseampla$d.escolaridade[baseampla$escolaridade == "Ensino BÃ¡sico" ] <- 0
# Dummy para estado civil (1=casado, 0=nao casado)
baseampla$estcivil = ifelse(baseampla$estcivil == "Casado", 1, 0)
# Dummy filhos ou dependentes morando em casa (1=sim, 0 do contrÃ¡rio)
baseampla$filho_dep = ifelse(baseampla$filho_dep ==
"Sim, filhos ou dependentes moram comigo.", 1, 0)
# Dummy plano de saude (1= sim, 0= nao)
baseampla$plano = ifelse(baseampla$plano == "Sim", 1, 0)
# Dummy contratou plano de saude por causa do covid  (1= sim, 0= nao)
baseampla$plano_covid = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy contratou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$data_plano = ifelse(baseampla$data_plano == "VocÃª contratou o plano de saÃºde DURANTE A PANDEMIA.", 1, 0)
# Dummy pagou plano de saude durante pandemia  (1= sim, 0= nao)
baseampla$pgt_plano = ifelse(baseampla$pgt_plano == "Sim", 1, 0)
# Dummy fez teste covid (1=testou covid, 0=Nao testou)
baseampla$teste_cov = ifelse(baseampla$teste_cov == "Sim", 1, 0)
# Dummy resultado teste covid (1=negativo , 0=outro)
baseampla$result_teste_1 = ifelse(baseampla$result_teste_cov == "Negativo", 1, 0)
# Dummy contato pessoa contaminada (1=sim, 0=Nao)
baseampla$contat_cov = ifelse(baseampla$contat_cov == "Sim", 1, 0)
# Dummy conhecia alguem que morreu por covid (sim=1, 0=Nao)
baseampla$morte_cov = ifelse(baseampla$morte_cov == "Sim", 1, 0)
# Dummy comprou defensivos contra covid (sim=1, 0=Nao)
baseampla$equip_defensiv = ifelse(baseampla$equip_defensiv == "Sim", 1, 0)
# Dummy para idoso (1=idoso, 0 nao idoso)
baseampla$idoso = ifelse(baseampla$idade >= 60, 1, 0)
# Renomeando valor do gasto defensivo total
baseampla$gasto_equip_defensivo <- baseampla$gasto_equip_defensiv
# Salvando base variaveis criadas para o formato para STATA.
# write.dta(baseampla, "covid_averting.dta")
# Visualizando a distribuicao das respostas por estado (uf)
#Reduzindo dataframe para apenas variaveis de interesse
baseampla_red <- subset(baseampla, select = c("gasto_equip_defensivo", "equip_defensiv", "idoso", "morte_cov", "idade", "contat_cov", "result_teste_1", "teste_cov", "pgt_plano","data_plano", "plano", "filho_dep", "estcivil", "d.escolaridade", "d.raca","raca", "sexo", "renda", "rendafam", "qtd_filho_dep","confirmed", "deaths", "confirmed_per_100k_inhabitants"))
# Salvando dataframe com apenas variaveis de interesse em formato STATA
# write.dta(baseampla_red, "covid_full.dta")
# Tratando Missing Values
# Para tratar os missing values estou usando a tÃ©cnica de imputacao presente nos links abaixo.
# Ref:  https://stats.idre.ucla.edu/r/faq/how-do-i-perform-multiple-imputation-using-predictive-mean-matching-in-r/
# https://datasciencebeginners.com/2018/11/11/a-brief-introduction-to-mice-r-package/
# Carregando dados do arquivo csv (diretamente do pc) referente as estatisiticas de covid-19
brasil.io <- read.csv('caso.csv', fileEncoding = "UTF-8")
setwd("C:/Users/User/Dropbox/Averting Expenditures Paper/rmd/Dadosbrutos")
# Carregando dados do arquivo csv (diretamente do pc) referente as estatisiticas de covid-19
brasil.io <- read.csv('caso.csv', fileEncoding = "UTF-8")
brasil.io$state %<>% as.character()
brasil.io$city %<>% as.character()
brasil.io$date %<>% as.Date()
gastoscovid <- read_excel("gastoscovid_v1206.xlsx", sheet = "respostas")
gastoscovid$data %<>% as.Date()
# Criando dataframe com dados ibge
ibgecode <- lookup_muni(code_muni = 'all') # optei por puxar TODOS os municipios pois poderei usa-los em outros trabalhos
# Reduzir ibgecode
# Criando um subset para reduzir a base de codigos do ibge
ibgecode_2 <- subset.data.frame(ibgecode, select = c(code_muni, name_muni, abrev_state))
gastos_citycodes <- merge(gastoscovid, ibgecode_2,
by.x = c("cidade", "uf"),
by.y = c("name_muni" , "abrev_state"),
all.x = TRUE, all.y = FALSE)
# MERGE com dados do brasil.io
baseampla2 <- merge(gastos_citycodes, brasil.io,
by.x = c("code_muni", "data"),
by.y = c("city_ibge_code", "date"),
all.x = TRUE, all.y = FALSE)
baseampla <- baseampla2[, -c(5, 6, 28:30, 33, 34)]
View(baseampla)
View(baseampla)
View(baseampla2)
View(baseampla2)
write.csv(baseampla,'baseampla.csv')
